// comment put this under /etc/firefox configs viewed at view-source:chrome://browser/content/browser.xhtml
pref("foo.bar.bazz", "bang");
let { classes: Cc, interfaces: Ci, manager: Cm  } = Components;
let Services = globalThis.Services || ChromeUtils.import("resource://gre/modules/Services.jsm").Services;
function ConfigJS() { Services.obs.addObserver(this, 'chrome-document-global-created', false); }


ConfigJS.prototype = {
  observe: function (aSubject) { aSubject.addEventListener('DOMContentLoaded', this, {once: true}); },
  handleEvent: function (aEvent) {
    let document = aEvent.originalTarget;
    let window = document.defaultView;
    let location = window.location;

    if (/^(chrome:(?!\/\/(global\/content\/commonDialog|browser\/content\/webext-panels)\.x?html)|about:(?!blank))/i.test(location.href)) {
      if (window._gBrowser) {

        let keys = [
                     "key_close",
                     "key_closeWindow",
                     "openFileKb",
                     "key_newNavigator",
                     "key_quitApplication",
                     "key_reload",
                     "key_viewSource",
                     "key_viewInfo",
                     "key_savePage",
                     "showAllHistoryKb",
                     "key_gotoHistory",
                     "key_openDownloads",
                     "addBookmarkAsKb",
                     "bookmarkAllTabsKb",
                     "manBookmarkKb",
                     "viewBookmarksSidebarKb",
                     "viewBookmarksToolbarKb",
                     "goBackKb",
                     "goForwardKb",
                     "goBackKb2",
                     "goForwardKb2",
                     "goHome",
                     "key_aboutProcesses",
                     "key_viewSourceSafari",
                     "key_restoreLastClosedTabOrWindowOrSession",
                     "key_selectTab1",
                     "key_selectTab2",
                     "key_selectTab3",
                     "key_selectTab4",
                     "key_selectTab5",
                     "key_selectTab6",
                     "key_selectTab7",
                     "key_selectTab8",
                     "key_selectLastTab",
                     "key_search",
                     "key_search2",
                     "key_openAddons",
                     "key_privatebrowsing",
                     "key_reload_skip_cache"
                     ];

        for (var i=0; i < keys.length; i++) {
            let keyCommand = window.document.getElementById(keys[i]);
            if (keyCommand != undefined) {
                keyCommand.removeAttribute("command");
                keyCommand.removeAttribute("key");
                keyCommand.removeAttribute("modifiers");
                keyCommand.removeAttribute("oncommand");
                keyCommand.removeAttribute("data-l10n-id");
            }
        }


        let mapKeys = [
          "key_newNavigatorTab",
          "focusURLBar",
        ]

        for (var i=0; i < mapKeys.length; i++) {
            let keyCommand = window.document.getElementById(mapKeys[i]);

            if (keyCommand != undefined) {
                keyCommand.setAttribute("command", "BrowserCommands.fullScreen()");
            }
        }

      }
    }
  }
};
if (!Services.appinfo.inSafeMode) { new ConfigJS(); }